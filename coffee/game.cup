body = document.body

$.units.to = $.units.convertTo

#include "util.cup"
#include "clock.cup"

# Set up 16:9 full-height dimensions
h = Math.max(body.scrollHeight, body.clientHeight)
w = h * 9 / 16


$(window).bind 'resize', ->
	h = Math.max(body.scrollHeight, body.clientHeight)
	w = h * 9 / 16
	window.game?.camera.scale = w / 40
	window.game?.canvas
		.zap( width: w, height: h )
		.css(	margin: "0 0 0 #{$.px -w/2}" )
	

KeyCodes =
	up: 38
	down: 40
	right: 39
	left: 37
	space: 32
	tab: 9
KeyNames = {}
for k,v of KeyCodes then KeyNames[v] = k

class $.Game extends $.Clock
	# specify the limits on camera panning
	x_clamp = $.clamp -20, 0 # these are in post-scale coords (yards)
	y_clamp = $.clamp -40, 20
	constructor: ->
		super @
		@objects = {}
		@active = new $.OrderedSet (a) -> -a.priority
		@visible = new $.OrderedSet (a) -> a.z
		@toDestroy = []
		@canvas = $("canvas").take(1)
			.zap( height: h, width: w)
			.css( # center the canvas
				position: "fixed"
				left: "50%"
				padding: "0"
				margin: "0 0 0 #{$.px -w/2}"
			)
		@context = ctx = @canvas.select('getContext').call('2d').first()
		@camera =
			scale: w / 40.0 # such that the viewport is 40yd x 40yd ?
			translate: [0, 20]
			toWorld: (x, y) -> [
				(x / @scale) - @translate[0],
				(y / @scale) - @translate[1]
			]
			toScreen: (x, y) -> [
				(x + @translate[0]) * @scale,
				(y + @translate[1]) * @scale
			]
		@on 'spawned', (obj) -> $.log obj.constructor.name, obj.guid, 'spawned'
		@on 'destroyed', (obj) -> $.log obj.constructor.name, obj.guid, 'destroyed'
		@on 'started', -> $.log 'started'
		@on 'stopped', -> $.log 'stopped'
		@on 'tick', (dt) => @onTick dt
		@on 'click', (x, y) => @onClick x, y
		@on 'touch', (x, y) => @onTouch x, y
		@canvas.bind 'mousedown', (evt) => @emit 'click', @camera.toWorld(evt.offsetX, evt.offsetY)...
		@canvas.bind 'touchstart touchmove', (evt) => @emit 'touch', @camera.toWorld(evt.touches[0].clientX, evt.touches[0].clientY)...
		$(body)
			.bind('keydown', (evt) => @onKeyDown KeyNames[evt.keyCode])
			.bind('keyup', (evt) => @onKeyUp KeyNames[evt.keyCode])
	spawn: (gameObject) ->
		return unless $.isType 'GameObject', gameObject
		gameObject.game = @
		@objects[gameObject.guid] = gameObject
		@emit 'spawned', gameObject
	destroy: (gameObject) ->
		return unless $.isType 'GameObject', gameObject
		@toDestroy.push gameObject

	onTick: (dt) ->
		ctx = @context
		cam = @camera
		# tick all the active game objects
		for obj in @active.ordered
			obj.tick dt
		# see if any items asked to be cleaned up
		while obj = @toDestroy.pop()
			obj.game = null
			delete @objects[obj.guid]
			if (i = @visible.ordered.select('guid').indexOf obj.guid) > -1
				@visible.ordered.splice i, 1
			if (i = @active.ordered.select('guid').indexOf obj.guid) > -1
				@active.ordered.splice i, 1
			@emit 'destroyed', obj
		# adjust the viewport for this frame
		ctx.save()
		ctx.clearRect 0,0,w,h
		ctx.scale cam.scale, cam.scale
		ctx.translate cam.translate...
		# draw every visible game object for this frame
		for obj in @visible.ordered
			ctx.save()
			obj.preDraw ctx
			obj.draw ctx
			ctx.restore()
		ctx.font = '1px courier'
		ctx.fillStyle = 'white'
		ctx.fillText @visible.ordered.map(->@constructor.name).join(','), 1, -5
		ctx.restore()
	onKeyDown: (key) ->
		t = @camera.translate
		switch key
			when 'up' then t[1] = y_clamp t[1] + 1
			when 'down' then t[1] = y_clamp t[1] - 1
			when 'left' then t[0] = x_clamp t[0] + 1
			when 'right' then t[0] = x_clamp t[0] - 1
	onKeyUp: (key) ->
	onClick: (x, y) ->
		new $.ActionText("Click!", x, y, 500).spawnIn(game).active(true).visible(true)
	onTouch: (x, y) ->
		new $.ActionText("Touch!", x, y, 500).spawnIn(game).active(true).visible(true)

$.type.register "game",
	match: (o) -> $.isType "Game", o
	hash: (o) -> $.hash o.objects

class $.FootballGame extends $.Game
	constructor: (@quarterLength = 300) ->
		super @
		@homeScore = 0
		@awayScore = 0
		@down = 1
		@togo = -10
		@scrimmage = 21
		@secondsLeft = @quarterLength * 4
		$.defineProperty @, 'quarter',
			get: -> 5 - Math.ceil(@secondsLeft / @quarterLength)
	onTick: (dt) ->
		@secondsLeft -= dt / 1000
		if @secondsLeft < 0
			return @stop()
		super dt

class $.GameObject extends $.EventEmitter
	$.type.register "gameobject",
		match: (o) -> $.isType "GameObject", o
		hash: (o) -> $.hash o.guid
	constructor: ->
		super @
		$.extend @,
			_active: false
			_visible: false
			guid: $.random.string 8
			game: null
			priority: 1
	visible: (val) ->
		return @_visible unless val?
		if @_visible = val then @game.visible.add @
		else @game.visible.remove @
		@
	active: (val) ->
		return @_active unless val?
		if @_active = val then @game.active.add @
		else @game.active.remove @
		@
	spawnIn: (@game) ->
		@game.spawn @
		@
	tick: (ctx) ->
	preDraw: (ctx) ->
	draw: (ctx) ->
	toString: -> "GameObject(guid=#{@guid})"
	destroy: ->
		@game.destroy(@)

#include "entity.cup"
#include "field.cup"
#include "scoreboard.cup"

class $.ActionText extends $.GameObject
	constructor: (@text, x, y, @duration, @opacity = 1.0) ->
		super @
		@elapsed = 0
		@x = $ x, y, 99
		@z = 99
	tick: (dt) ->
		@x[1] -= .1
		@opacity -= dt / @duration
		if (@elapsed += dt) > @duration
			@destroy()
	draw: (ctx) ->
		ctx.font = "small-caps 2px courier"
		ctx.fillStyle = "rgba(255,255,255, #{@opacity.toFixed 2})"
		ctx.fillText @text, @x...

class $.Unit extends $.Entity
class $.Ball extends $.Entity

window.game = new $.FootballGame()
new $.Field().spawnIn(game).visible(true)
new $.Scoreboard().spawnIn(game).visible(true).active(true)

game.start()
$.delay 15000, -> game.stop()

###
class $.Circle extends $.Entity
	constructor: ->
		super @
		@size.r = 0
	radius: (r) -> @size.r = r; @
	area: -> Math.PI * @size.r * @size.r
	overlaps: (circleB) ->
		@getDistance(circleB) < (@size.r + circleB.size.r)
	draw: (ctx) ->
		ctx.beginPath()
		ctx.arc 0, 0, @size.r, 0, Math.PI*2, true
		ctx.closePath()
		super ctx

Teams =
	red: -> @fill('red')
	blue: -> @fill('blue')

class window.Football extends $.Circle
	constructor: ->
		super @
		@owner = null
		@highlighted = false
		@radius(BALL_RADIUS)
			.drag(PLAYER_DRAG)
			.rotdrag(MAX_DRAG)
			.mass(PLAYER_MASS_KG)
	tick: (dt) ->
		if @owner?
			x = @owner.x
			rx = @owner.rot.x
			if @x.minus(x).magnitude() > 2
				r = @size.r*.9
				@position $(r,r).plus(x)...
			if @rot.x - rx > 0
				@rotation rx
		else
			super dt
	draw: (ctx) ->
		r = @size.r
		ctx.beginPath()
		ctx.arc 0,0, r, 0, Math.PI*2, true
		ctx.fillStyle = 'brown'
		ctx.fill()
		ctx.closePath()

		ctx.beginPath()
		y = -r*.25
		ctx.moveTo r/2, y
		ctx.lineTo y, r/2
		ctx.lineWidth = w >>> 8
		ctx.strokeStyle = 'white'
		ctx.stroke()
		ctx.closePath()

		if @highlighted
			ctx.beginPath()
			ctx.arc 0,0,r, 0, Math.PI*2, true
			ctx.strokeStyle = 'yellow'
			unless @owner?
				ctx.strokeStyle = 'red'
			ctx.lineWidth = w >>> 8
			ctx.stroke()
			ctx.closePath()

#include "player.cup"


Formations =
	defense:
		"base":
			positions: [
				[0, -10], # Safety
				[-7, -2.5], [7, -2.5], # CB
				[-2, -4.5], [2, -4.5], # LB
				[-3, -1.5], [-1, -1.5], [1, -1.5], [3, -1.5], # DL
			]
	offense:
		"single-back":
			positions: [
				[-3,0.5], [-1.5,0.5], # LG,LT
				[0,0.5], # C
				[3,0.5],[1.5,0.5], # RG,RT
				[0,1.5], # QB
				[0,4.5], # HB
				[-8,1.5], [8,1.5], # WR
			]
			ball: 5
spawnFormation = (x,y,formation, team) ->
	start = entities.length
	for pos in formation.positions
		new FootballPlayer(team).position(pos[0]*yards+x,pos[1]*yards+y)
	if formation.ball
		entities[start + formation.ball].giveBall(gameBall)

class Slingshot extends Entity
	constructor: ->
		super @
		@reset()
		teamNames = $.keysOf(Teams)
		canvas.bind 'mousedown', (evt) =>
			clock.start()
			if target = Circle.findAt(evt.position()...)
				whoseTurn = teamNames[Math.floor(turnCounter / MOVES_PER_TURN) % teamNames.length]
				if $.isType(FootballPlayer, target) and target.jersey.team isnt whoseTurn
					$.log "not your turn #{target.jersey.team}, it's #{whoseTurn}s"
					return
				@slingTarget = target
				@slingStart = @slingTarget.x
				@slingEnd = @slingStart.slice()
				@slingTarget.highlighted = true
			evt.preventAll()
		canvas.bind 'touchcancel', (evt) =>
			@reset()
		canvas.bind 'mouseup, mouseout', (evt) =>
			@release()
			evt.preventAll()
		canvas.bind 'mousemove', (evt) =>
			@slingEnd = evt.position()
	reset: ->
		@slingTarget?.highlighted = false
		@slingTarget = @slingStart = @slingEnd = null

	IMPULSE_FORCE_SCALE = 120
	IMPULSE_TIME_SCALE = 100
	# Releasing a loaded slingshot applies force to the slingTarget
	release: ->
		try
			if @slingTarget?
				force = @slingStart.minus(@slingEnd).scale(IMPULSE_FORCE_SCALE)
				if force.magnitude() > 0
					ok = true
					if $.isType Football, @slingTarget
						# a football with no owner cannot be moved
						unless @slingTarget.owner?
							ok and= false
						# and impulsing the ball is akin to throwing: it is removed from its owner
						@slingTarget.owner?.releaseBall()
					if ok
						@slingTarget.applyForce IMPULSE_TIME_SCALE, force...
						turnCounter++
					@slingTarget.highlighted = false
				else
					clock.stop()
			@reset()
		catch e
			console.error e

	draw: (ctx) ->
		if @slingTarget and @slingEnd
			target = @slingTarget.x
			ctx.translate 0,0
			ctx.beginPath()
			ctx.moveTo target...
			ctx.lineTo target.minus(@slingEnd).plus(target)...
			ctx.lineWidth = w/128
			ctx.strokeStyle = 'white'
			if $.isType Football, @slingTarget
				if @slingTarget.owner?
					ctx.strokeStyle = 'yellow'
				else
					ctx.strokeStyle = 'red'
			ctx.stroke()
			ctx.closePath()
###
